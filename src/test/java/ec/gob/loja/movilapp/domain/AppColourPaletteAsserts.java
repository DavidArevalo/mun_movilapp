package ec.gob.loja.movilapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AppColourPaletteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppColourPaletteAllPropertiesEquals(AppColourPalette expected, AppColourPalette actual) {
        assertAppColourPaletteAutoGeneratedPropertiesEquals(expected, actual);
        assertAppColourPaletteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppColourPaletteAllUpdatablePropertiesEquals(AppColourPalette expected, AppColourPalette actual) {
        assertAppColourPaletteUpdatableFieldsEquals(expected, actual);
        assertAppColourPaletteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppColourPaletteAutoGeneratedPropertiesEquals(AppColourPalette expected, AppColourPalette actual) {
        assertThat(expected)
            .as("Verify AppColourPalette auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppColourPaletteUpdatableFieldsEquals(AppColourPalette expected, AppColourPalette actual) {
        assertThat(expected)
            .as("Verify AppColourPalette relevant properties")
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getPrimaryColour()).as("check primaryColour").isEqualTo(actual.getPrimaryColour()))
            .satisfies(e -> assertThat(e.getSecondaryColour()).as("check secondaryColour").isEqualTo(actual.getSecondaryColour()))
            .satisfies(e -> assertThat(e.getTertiaryColour()).as("check tertiaryColour").isEqualTo(actual.getTertiaryColour()))
            .satisfies(e -> assertThat(e.getNeutralColour()).as("check neutralColour").isEqualTo(actual.getNeutralColour()))
            .satisfies(
                e -> assertThat(e.getLigthBackgroundColour()).as("check ligthBackgroundColour").isEqualTo(actual.getLigthBackgroundColour())
            )
            .satisfies(
                e -> assertThat(e.getDarkBackgroundColour()).as("check darkBackgroundColour").isEqualTo(actual.getDarkBackgroundColour())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppColourPaletteUpdatableRelationshipsEquals(AppColourPalette expected, AppColourPalette actual) {
        assertThat(expected)
            .as("Verify AppColourPalette relationships")
            .satisfies(e -> assertThat(e.getApplications()).as("check applications").isEqualTo(actual.getApplications()));
    }
}
