package ec.gob.loja.movilapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ApplicationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationAllPropertiesEquals(Application expected, Application actual) {
        assertApplicationAutoGeneratedPropertiesEquals(expected, actual);
        assertApplicationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationAllUpdatablePropertiesEquals(Application expected, Application actual) {
        assertApplicationUpdatableFieldsEquals(expected, actual);
        assertApplicationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationAutoGeneratedPropertiesEquals(Application expected, Application actual) {
        assertThat(expected)
            .as("Verify Application auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationUpdatableFieldsEquals(Application expected, Application actual) {
        assertThat(expected)
            .as("Verify Application relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getUrlAndroid()).as("check urlAndroid").isEqualTo(actual.getUrlAndroid()))
            .satisfies(e -> assertThat(e.getUrlIos()).as("check urlIos").isEqualTo(actual.getUrlIos()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getVersion()).as("check version").isEqualTo(actual.getVersion()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationUpdatableRelationshipsEquals(Application expected, Application actual) {
        assertThat(expected)
            .as("Verify Application relationships")
            .satisfies(e -> assertThat(e.getBanners()).as("check banners").isEqualTo(actual.getBanners()))
            .satisfies(e -> assertThat(e.getColourPalettes()).as("check colourPalettes").isEqualTo(actual.getColourPalettes()))
            .satisfies(e -> assertThat(e.getSocialMedias()).as("check socialMedias").isEqualTo(actual.getSocialMedias()));
    }
}
