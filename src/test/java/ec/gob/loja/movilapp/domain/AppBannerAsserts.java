package ec.gob.loja.movilapp.domain;

import static ec.gob.loja.movilapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class AppBannerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppBannerAllPropertiesEquals(AppBanner expected, AppBanner actual) {
        assertAppBannerAutoGeneratedPropertiesEquals(expected, actual);
        assertAppBannerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppBannerAllUpdatablePropertiesEquals(AppBanner expected, AppBanner actual) {
        assertAppBannerUpdatableFieldsEquals(expected, actual);
        assertAppBannerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppBannerAutoGeneratedPropertiesEquals(AppBanner expected, AppBanner actual) {
        assertThat(expected)
            .as("Verify AppBanner auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppBannerUpdatableFieldsEquals(AppBanner expected, AppBanner actual) {
        assertThat(expected)
            .as("Verify AppBanner relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getBannerImage()).as("check bannerImage").isEqualTo(actual.getBannerImage()))
            .satisfies(
                e ->
                    assertThat(e.getBannerImageContentType())
                        .as("check bannerImage contenty type")
                        .isEqualTo(actual.getBannerImageContentType())
            )
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getInitDate()).as("check initDate").isEqualTo(actual.getInitDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(
                e ->
                    assertThat(e.getInitTime())
                        .as("check initTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getInitTime())
            )
            .satisfies(
                e -> assertThat(e.getEndTime()).as("check endTime").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getEndTime())
            )
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getUrl()).as("check url").isEqualTo(actual.getUrl()))
            .satisfies(
                e ->
                    assertThat(e.getCreatedAt())
                        .as("check createdAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getCreatedAt())
            )
            .satisfies(
                e ->
                    assertThat(e.getModificationDate())
                        .as("check modificationDate")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getModificationDate())
            )
            .satisfies(e -> assertThat(e.getPriority()).as("check priority").isEqualTo(actual.getPriority()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppBannerUpdatableRelationshipsEquals(AppBanner expected, AppBanner actual) {
        assertThat(expected)
            .as("Verify AppBanner relationships")
            .satisfies(e -> assertThat(e.getApplications()).as("check applications").isEqualTo(actual.getApplications()));
    }
}
